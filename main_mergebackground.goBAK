package main

import (
	"encoding/json"
	"fmt"
	"github.com/AvraamMavridis/randomcolor"
	"github.com/h2non/bimg"
	gim "github.com/ozankasikci/go-image-merge"
	"image"
	"image/color"
	"image/draw"
	"image/jpeg"
	"image/png"
	_ "image/png"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"
)

const (
	BASE_PATH        = "BabypunksOriginal"
	BACKGROUNDS_PATH = BASE_PATH + "/Backgrounds"
	CLOTHES_PATH     = BASE_PATH + "/Clothes"
	DUMMIES_PATH     = BASE_PATH + "/Pacifiers"
	EYES_PATH        = BASE_PATH + "/Eyes"
	HAIRS_PATH       = BASE_PATH + "/Hairs"
	HATS_PATH        = BASE_PATH + "/Hats"
	HANDS_PATH       = BASE_PATH + "/Hands"
	STROKES_PATH     = BASE_PATH + "/Strokes"
	SKINS_PATH       = BASE_PATH + "/Skins"
	BACKS_PATH       = BASE_PATH + "/backs"
)

/*
	accessoriesPercent := GenerateRandomNumber(1, 100)
	hatsPercent := GenerateRandomNumber(1, 100)
	hairPercent := GenerateRandomNumber(1, 100)

	fmt.Println(accessoriesPercent)
	fmt.Println(hatsPercent)
	fmt.Println(hairPercent)
*/

/*
	1. Background
	2. Stroke
	3. Skin
	4. Clothes
	5. Hats
	6. Glasses
	7. Pacifiers
	8. Hairs
	9. BackObjects
	10. HandObjects
	11. HeadObjects
*/
/*
	rarityPercent := map[string]int{
		"common":   50,
		"uncommon": 28,
		"rare":     15,
		"mythical": 5,
		"legend":   2,
	}
*/

var layers = make([]ImageLayer, 0)

func main() {

	/*

		// UNCOMMON
		if rarityPercent >= 50 && rarityPercent < 78 {
			// cojo ropa uncommon
			strokes = GetFiles(STROKES_PATH, "Common")
		}

		// RARE
		if rarityPercent >= 78 && rarityPercent < 93 {
			// cojo ropa rare
			strokes = GetFiles(STROKES_PATH, "Common")
		}

		// MYTHICAL
		if rarityPercent >= 94 && rarityPercent < 98 {
			// cojo ropa mythical
			strokes = GetFiles(STROKES_PATH, "Common")
		}

		// LEGEND
		if rarityPercent >= 98 && rarityPercent < 100 {
			// cojo ropa legend
			strokes = GetFiles(STROKES_PATH, "Common")
		}
	*/

	COMMON_START_RANGE := 0
	COMMON_END_RANGE := 32

	var backgroundImagePath string
	var strokeImagePath string
	var babiesImagePath string

	var backgrounds []string
	var strokes []string
	var babies []string

	backgrounds = GetFiles(BACKGROUNDS_PATH, "Common")
	strokes = GetFiles(STROKES_PATH, "All")
	babies = GetFiles("unicos", "All")

	elements := make([]*MetaplexMetadata, 0)

	for i := COMMON_START_RANGE; i < COMMON_END_RANGE; i++ {

		backgroundImagePath = backgrounds[GenerateRandomNumber(0, len(backgrounds)-1)]
		strokeImagePath = strokes[GenerateRandomNumber(0, len(strokes)-1)]
		babiesImagePath = babies[GenerateRandomNumber(0, len(babies)-1)]

		var colorInRGB randomcolor.RGBColor = randomcolor.GetRandomColorInRgb()
		col := color.RGBA{uint8(colorInRGB.Red), uint8(colorInRGB.Green), uint8(colorInRGB.Blue), 0xaa}
		c := image.NewRGBA(image.Rect(0, 0, 2480, 3508))
		draw.Draw(c, c.Bounds(), image.NewUniform(col), image.ZP, draw.Src)

		layers = append(layers, ImageLayer{
			Image: c,
			XPos:  0,
			YPos:  0,
		})

		AddElement(backgroundImagePath)
		AddElement(strokeImagePath)
		AddElement(babiesImagePath)

		res, err := GenerateBanner(layers, 512, 512)
		if err != nil {
			log.Printf("Error generating banner: %+v\n", err)
		}

		counterString := strconv.Itoa(i)
		f, _ := os.Create("./Babies/common/uniques/" + counterString + ".png")
		png.Encode(f, res)

		log.Println(counterString)
	}

	j2, _ := json.Marshal(elements)

	// to append to a file
	// create the file if it doesn't exists with O_CREATE, Set the file up for read write, add the append flag and set the permission
	f2, errr2 := os.OpenFile("./Babies/common/merged/whole.json", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0660)
	defer f2.Close()
	if errr2 != nil {
		log.Fatal(errr2)
	}
	// write to file, f.Write()
	f2.Write(j2)

	/*
			// to append to a file
		// create the file if it doesn't exists with O_CREATE, Set the file up for read write, add the append flag and set the permission
		f, errr := os.OpenFile("./Babies/common/original/"+counterString+".json", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0660)
		defer f.Close()
		if errr != nil {
			log.Fatal(errr)
		}
		// write to file, f.Write()
		f.Write(j)
	*/

	//ResizeImages("Babies", "common", COMMON_END_RANGE)
	//MergeImages("Babies", "common", COMMON_END_RANGE)
}

func AddAttributes(metadata *MetaplexMetadata, name string, value string) {
	metadata.Attributes = append(metadata.Attributes, Attribute{
		TraitType: name,
		Value:     GetObjectName(value),
	})
}

func AddElement(layer string) {
	img, e := openImage(layer)
	if e != nil {
		panic("e")
		panic(e)
	}

	layers = append(layers, ImageLayer{
		Image: img,
		XPos:  0,
		YPos:  0,
	})
}

func GetObjectName(object string) string {
	s := strings.Split(object, "/")
	objectName := s[len(s)-1]
	objectName = strings.Replace(objectName, ".png", "", 4)
	return objectName
}

func GetObjectRarity(object string) string {

	if strings.Contains(object, "Uncommon") {
		return "Uncommon"
	}

	if strings.Contains(object, "Common") {
		return "Common"
	}

	if strings.Contains(object, "Rare") {
		return "Rare"
	}

	if strings.Contains(object, "Mythical") {
		return "Mythical"
	}

	if strings.Contains(object, "Legend") {
		return "Legend"
	}

	return ""
}

func openImage(path string) (image.Image, error) {
	var file, err = os.OpenFile(path, os.O_RDWR, 0644)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	imageFile, _, err := image.Decode(file)
	if err != nil {
		return nil, err
	}

	return imageFile, err
}

func GetFiles(root string, fileType string) []string {
	var files []string

	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if strings.Contains(path, ".png") {
			t := GetObjectRarity(path)
			if fileType == "All" {
				files = append(files, path)
			} else {
				if t == fileType {
					files = append(files, path)
				}
			}
		}
		return nil
	})
	if err != nil {
		panic(err)
	}
	/*
		for _, file := range files {
			fmt.Println(file)
		}
	*/
	return files
}

func GenerateRandomNumber(min, max int) int {
	rand.Seed(time.Now().UnixNano())
	n := rand.Intn(max-min+1) + min
	//fmt.Println(n)

	return n
}

func ResizeImages(collectionName, generatedType string, amount int) {
	//for i := 4445; i < 6933; i++ {
	for i := 0; i < amount; i++ {
		counterString := strconv.Itoa(i)
		ResizeImage("./"+collectionName+"/"+generatedType+"/original/"+counterString+".png", "./"+collectionName+"/"+generatedType+"/resized/", 256)
	}
}

func MergeImages(collectionName, generatedType string, amount int) {

	grids := make([]*gim.Grid, 0)

	for i := 0; i < amount; i++ {
		counterString := strconv.Itoa(i)
		currentFile := collectionName + "/" + generatedType + "/resized/" + counterString + ".png"

		g := &gim.Grid{
			ImageFilePath: currentFile,
		}
		grids = append(grids, g)

		fmt.Println(counterString)

		if i != 0 && i%324 == 0 {
			rgba, err := gim.New(grids, 18, 18).Merge()
			if err != nil {
				panic(err)
			}

			// save the output to jpg or png
			file, err2 := os.Create(collectionName + "/" + generatedType + "/merged/" + counterString + ".png")
			if err2 != nil {
				panic(err2)
			}
			err = jpeg.Encode(file, rgba, &jpeg.Options{Quality: 100})
			err = png.Encode(file, rgba)
			grids = []*gim.Grid{}
		}
	}
}

func ResizeImage(path string, out string, width int) {
	buffer, err := bimg.Read(path)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
	}

	newImage, err := bimg.NewImage(buffer).Resize(width, width)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
	}

	size, err := bimg.NewImage(newImage).Size()
	if size.Width == width && size.Height == width {
		fmt.Println("The image size is valid " + path)
	}

	s := strings.Split(path, "/")
	bimg.Write(out+s[len(s)-1], newImage)
}

func AddLabel(path string) {
	/*
		buffer, err := bimg.Read(path)
		if err != nil {
			fmt.Println("os.Stderr, err")
			fmt.Fprintln(os.Stderr, err)
		}


			watermark := bimg.Watermark{
				Text:       "1",
				Opacity:    1,
				Width:      48,
				DPI:        100,
				Background: bimg.Color{R: 255, G: 255, B: 255},
			}

		newImage, err := bimg.NewImage(buffer).Resize(48, 48)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
		}


			newImage2, err2 := bimg.NewImage(newImage).Watermark(watermark)
			if err != nil {
				fmt.Println("os.Stderr, err2")
				fmt.Fprintln(os.Stderr, err2)
			}


		size, err := bimg.NewImage(newImage).Size()
		if size.Width == size && size.Height == 48 {
			fmt.Println("The image size is valid " + path)
		}

		s := strings.Split(path, "/")
		bimg.Write("./generatedResizedLabel/"+s[len(s)-1], newImage)
	*/
}
