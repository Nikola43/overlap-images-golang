package main

import (
	"encoding/json"
	"fmt"
	. "github.com/ahmetb/go-linq/v3"
	_ "image/png"
	"io/ioutil"
	"os"
)

func main()  {
	// Open our jsonFile
	jsonFile, err := os.Open("whole.json")
	// if we os.Open returns an error then handle it
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("Successfully Opened users.json")
	// defer the closing of our jsonFile so that we can parse it later on
	defer jsonFile.Close()

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	// we initialize our Users array
	var metaplexMetadatas = make([]MetaplexMetadata, 0)

	// we unmarshal our byteArray which contains our
	// jsonFile's content into 'users' which we defined above
	json.Unmarshal(byteValue, &metaplexMetadatas)

	//fmt.Println(metaplexMetadatas)

	CalculateRarity(metaplexMetadatas, metaplexMetadatas[0])

}

func CalculateRarity(metadatas []MetaplexMetadata, item MetaplexMetadata) {
	//numberOfOwners := 0
	owners := make([]MetaplexMetadata, 0)

	itemMetadataAttributes := item.Attributes
	for i := 0; i < len(itemMetadataAttributes); i++ {

		fmt.Println(itemMetadataAttributes[i].TraitType)
		fmt.Println(itemMetadataAttributes[i].Value)

		From(metadatas).Where(func(c interface{}) bool {

			From(c.(MetaplexMetadata).Attributes).Where(func(c interface{}) bool {
				return c.(Attribute).TraitType == itemMetadataAttributes[i].TraitType && c.(Attribute).Value == itemMetadataAttributes[i].Value
			}).Select(func(c interface{}) interface{} {
				return c.(Attribute)
			})
			return c.(MetaplexMetadata)
		}).Select(func(c interface{}) interface{} {
			return c.(MetaplexMetadata)

		}).ToSlice(&owners)
	}

	fmt.Println(len(owners))

	/*
		for _, currentMetadata := range metadatas {
			currentMetadataAttributes := currentMetadata.Attributes

			for i := 0; i < len(itemMetadataAttributes); i++ {

			}
		}
	*/

}
