package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/AvraamMavridis/randomcolor"
	"github.com/h2non/bimg"
	gim "github.com/ozankasikci/go-image-merge"
	"image"
	"image/color"
	"image/jpeg"
	"image/png"
	_ "image/png"
	"log"
	"math/rand"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

const (
	BASE_PATH        = "BabypunksResized"
	BACKGROUNDS_PATH = BASE_PATH + "/Backgrounds"
	CLOTHES_PATH     = BASE_PATH + "/Clothes"
	DUMMIES_PATH     = BASE_PATH + "/Pacifiers"
	EYES_PATH        = BASE_PATH + "/Eyes"
	HAIRS_PATH       = BASE_PATH + "/Hairs"
	HATS_PATH        = BASE_PATH + "/Hats"
	HANDS_PATH       = BASE_PATH + "/Hands"
	STROKES_PATH     = BASE_PATH + "/Strokes"
	SKINS_PATH       = BASE_PATH + "/Skins"
	BACKS_PATH       = BASE_PATH + "/backs"
)

/*
	accessoriesPercent := GenerateRandomNumber(1, 100)
	hatsPercent := GenerateRandomNumber(1, 100)
	hairPercent := GenerateRandomNumber(1, 100)

	fmt.Println(accessoriesPercent)
	fmt.Println(hatsPercent)
	fmt.Println(hairPercent)
*/

/*
	1. Background
	2. Stroke
	3. Skin
	4. Clothes
	5. Hats
	6. Glasses
	7. Pacifiers
	8. Hairs
	9. BackObjects
	10. HandObjects
	11. HeadObjects
*/
/*
	rarityPercent := map[string]int{
		"common":   50,
		"uncommon": 28,
		"rare":     15,
		"mythical": 5,
		"legend":   2,
	}
*/

var layers = make([]ImageLayer, 0)
var src cryptoSource
var rnd *rand.Rand

var (
	colorB = [3]float64{248, 54, 0}
	colorA = [3]float64{254, 140, 0}
)

var (
	max = float64(0)
)

func linearGradient(x, y float64) (uint8, uint8, uint8) {
	d := x / max
	r := colorA[0] + d*(colorB[0]-colorA[0])
	g := colorA[1] + d*(colorB[1]-colorA[1])
	b := colorA[2] + d*(colorB[2]-colorA[2])
	return uint8(r), uint8(g), uint8(b)
}

func GenerateImage(filename string, width, height int) *image.RGBA {
	var r1 = randomcolor.GetRandomColorInRgb()
	var r2 = randomcolor.GetRandomColorInRgb()
	max = float64(width)

	colorA = [3]float64{float64(r1.Red), float64(r1.Green), float64(r1.Blue)}
	colorB = [3]float64{float64(r2.Red), float64(r2.Green), float64(r2.Blue)}

	var w, h int = width, height
	dst := image.NewRGBA(image.Rect(0, 0, w, h)) //*NRGBA (image.Image interface)

	for x := 0; x < w; x++ {
		for y := 0; y < h; y++ {
			r, g, b := linearGradient(float64(x), float64(y))
			c := color.RGBA{

				r,
				g,
				b,
				255,
			}
			dst.Set(x, y, c)
		}
	}

	//img, _ := os.Create(filename)
	//defer img.Close()
	//png.Encode(img, dst) //Encode writes the Image m to w in PNG format.

	return dst
}

func main() {

	//ResizeImages2("Babies/common/uniques", "common", 10, 256)
	//MergeImages("Babies", "common", 20, 5, 2, 10)
	//os.Exit(0)

	/*
		for i := 0; i < 200; i++ {
			counterString := strconv.Itoa(i)
			GenerateImage("backsGo/backs_" + counterString + ".png")
		}
		os.Exit(0)
	*/
	//ResizeImages("Babies", "common", 10000, 256)
	//MergeImages("Babies", "common", 10000, 25, 40, 1000)
	//os.Exit(0)

	rnd = rand.New(src)
	//ResizeImages("Babies", "common", 10)
	//MergeImages("Babies", "common", 10, 2, 5, 9)
	//os.Exit(0)

	var backgrounds []string
	var pacifiers []string
	var hairs []string
	var clothes []string
	var hats []string
	var eyes []string
	var skins []string
	var strokes []string
	var hands []string
	var backs []string

	var backgroundImagePath string
	var strokeImagePath string
	var skinImagePath string
	var clotheImagePath string
	var hatImagePath string
	var hairImagePath string
	var pacifierImagePath string
	var eyesImagePath string
	var handImagePath string
	var backImagePath string

	COMMON_START_RANGE := 0
	COMMON_END_RANGE := 9999

	fmt.Println(backgroundImagePath)

	elements := make([]*MetaplexMetadata, 0)
	backgrounds = GetFiles(BACKGROUNDS_PATH, "Common")
	fmt.Println(backgrounds)

	for i := COMMON_START_RANGE; i <= COMMON_END_RANGE; i++ {
		layers = make([]ImageLayer, 0)

		metadata := new(MetaplexMetadata)
		metadata.Symbol = "BabyPunk"
		metadata.Description = "BabyPunk"
		metadata.SellerFeeBasisPoints = 500
		metadata.ExternalURL = "https://babypunks.com"
		metadata.Edition = "2021"
		metadata.Properties.Category = "image"
		metadata.Properties.Creators = append(metadata.Properties.Creators, Creator{
			Address: "EvoxAZfVTsovzFLdBX4pkDnrJZfFqUcYaWUMkKdsyaiK",
			Share:   100,
		})
		metadata.Collection.Name = "BabyPunk Season #1"
		metadata.Collection.Family = "BabyPunk on Solana"

		strokePercent := GenerateRandomNumber(0, 100)
		clothesPercent := GenerateRandomNumber(0, 100)
		pacifiersPercent := GenerateRandomNumber(0, 100)
		skinPercent := GenerateRandomNumber(0, 100)
		hairsPercent := GenerateRandomNumber(0, 100)
		hatsPercent := GenerateRandomNumber(0, 100)
		handsPercent := GenerateRandomNumber(0, 100)
		backPercent := GenerateRandomNumber(0, 100)
		eyesRarityPercent := GenerateRandomNumber(1, 100)
		hairOrHatPercent := GenerateRandomNumber(1, 100)
		hardOrNotPercent := GenerateRandomNumber(1, 100)
		capeOrNotPercent := GenerateRandomNumber(1, 100)

		strokeType := ""
		clothesType := ""
		pacifiersType := ""
		skinType := ""
		hairType := ""
		hatType := ""
		handType := ""
		backType := ""

		if strokePercent >= 0 && strokePercent < 50 {
			strokeType = "Common"
		} else if strokePercent >= 50 && strokePercent < 78 {
			strokeType = "Uncommon"
		} else if strokePercent >= 78 && strokePercent < 93 {
			strokeType = "Rare"
		} else if strokePercent >= 93 && strokePercent < 98 {
			strokeType = "Mythical"
		} else {
			strokeType = "Legend"
		}

		if skinPercent >= 0 && skinPercent < 50 {
			skinType = "Common"
		} else if skinPercent >= 50 && skinPercent < 78 {
			skinType = "Uncommon"
		} else if skinPercent >= 78 && skinPercent < 93 {
			skinType = "Rare"
		} else if skinPercent >= 93 && skinPercent < 98 {
			skinType = "Mythical"
		} else if skinPercent >= 98 && skinPercent <= 100 {
			skinType = "Legend"
		}

		if clothesPercent >= 0 && clothesPercent < 50 {
			clothesType = "Common"
		} else if clothesPercent >= 50 && clothesPercent < 78 {
			clothesType = "Uncommon"
		} else if clothesPercent >= 78 && clothesPercent < 93 {
			clothesType = "Rare"
		} else if clothesPercent >= 93 && clothesPercent < 98 {
			clothesType = "Mythical"
		} else {
			clothesType = "Legend"
		}

		if pacifiersPercent >= 0 && pacifiersPercent < 50 {
			pacifiersType = "Common"
		} else if pacifiersPercent >= 50 && pacifiersPercent < 78 {
			pacifiersType = "Uncommon"
		} else if pacifiersPercent >= 78 && pacifiersPercent < 93 {
			pacifiersType = "Rare"
		} else if pacifiersPercent >= 93 && pacifiersPercent < 98 {
			pacifiersType = "Mythical"
		} else {
			pacifiersType = "Legend"
		}

		if hairsPercent >= 0 && hairsPercent < 50 {
			hairType = "Common"
		} else if hairsPercent >= 50 && hairsPercent < 78 {
			hairType = "Uncommon"
		} else if hairsPercent >= 78 && hairsPercent < 93 {
			hairType = "Rare"
		} else if hairsPercent >= 93 && hairsPercent < 98 {
			hairType = "Mythical"
		} else if hairsPercent >= 98 && hairsPercent <= 100 {
			hairType = "Legend"
		}

		if hatsPercent >= 0 && hatsPercent < 50 {
			hatType = "Common"
		} else if hatsPercent >= 50 && hatsPercent < 78 {
			hatType = "Uncommon"
		} else if hatsPercent >= 78 && hatsPercent < 93 {
			hatType = "Rare"
		} else if hatsPercent >= 93 && hatsPercent < 98 {
			hatType = "Mythical"
		} else if hatsPercent >= 98 && hatsPercent <= 100 {
			hatType = "Legend"
		}

		if handsPercent >= 0 && handsPercent < 50 {
			handType = "Common"
		} else if handsPercent >= 50 && handsPercent < 78 {
			handType = "Uncommon"
		} else if handsPercent >= 78 && handsPercent < 93 {
			handType = "Rare"
		} else if handsPercent >= 93 && handsPercent < 98 {
			handType = "Mythical"
		} else if handsPercent >= 98 && handsPercent <= 100 {
			handType = "Legend"
		}

		if backPercent >= 0 && backPercent < 50 {
			backType = "Rare"
		} else if backPercent >= 50 && backPercent < 78 {
			backType = "Rare"
		} else if backPercent >= 78 && backPercent < 93 {
			backType = "Rare"
		} else if backPercent >= 93 && backPercent < 98 {
			backType = "Mythical"
		} else if backPercent >= 98 && backPercent <= 100 {
			backType = "Legend"
		}

		// COMMON

		/*
			1. Background
			2. Stroke
			3. Skin
			4. Clothes
			5. Hats
			6. Glasses
			7. Pacifiers
			8. Hairs
			9. BackObjects
			10. HandObjects
			11. HeadObjects
		*/

		/*
			var colorInRGB = randomcolor.GetRandomColorInRgb()
			col := color.RGBA{uint8(colorInRGB.Red), uint8(colorInRGB.Green), uint8(colorInRGB.Blue), 0xaa}
			c := image.NewRGBA(image.Rect(0, 0, 1024, 1024))
			draw.Draw(c, c.Bounds(), image.NewUniform(col), image.ZP, draw.Src)

			layers = append(layers, ImageLayer{
				Image: c,
				XPos:  0,
				YPos:  0,
			})
		*/

		/*
			layers = append(layers, ImageLayer{
				Image: GenerateImage("t", 1024, 1024),
				XPos:  0,
				YPos:  0,
			})
		*/

		//AddElement(GetFiles("BabypunksOriginal/baseback", "All")[0])

		backgroundImagePath = backgrounds[GenerateRandomNumber(0, len(backgrounds)-1)]
		AddElement(backgroundImagePath)
		//AddAttributes(metadata, "Background", backgroundImagePath)

		strokes = GetFiles(STROKES_PATH, strokeType)
		strokeImagePath = strokes[GenerateRandomNumber(0, len(strokes))]
		AddElement(strokeImagePath)
		AddAttributes(metadata, "Stroke", strokeImagePath)

		skins = GetFiles(SKINS_PATH, skinType)
		skinImagePath = skins[GenerateRandomNumber(0, len(skins))]
		AddElement(skinImagePath)
		AddAttributes(metadata, "Skin", skinImagePath)

		clothes = GetFiles(CLOTHES_PATH, clothesType)
		clotheImagePath = clothes[GenerateRandomNumber(0, len(clothes)-1)]
		AddElement(clotheImagePath)
		AddAttributes(metadata, "Clothes", clotheImagePath)

		if hairOrHatPercent >= 0 && hairOrHatPercent < 40 {

			if eyesRarityPercent >= 0 && eyesRarityPercent < 40 {
				eyes = GetFiles(EYES_PATH, "All")

				eyesImagePath = eyes[GenerateRandomNumber(0, len(eyes)-1)]
				AddAttributes(metadata, "Eyes", eyesImagePath)
				AddElement(eyesImagePath)
			}

			//fmt.Println(hatType)
			hats = GetFiles(HATS_PATH, hatType)

			//fmt.Println(hatsPercent)
			hatImagePath = hats[GenerateRandomNumber(0, len(hats)-1)]
			AddAttributes(metadata, "Hat", hatImagePath)
			AddElement(hatImagePath)

		} else if hairOrHatPercent >= 40 && hairOrHatPercent < 80 {

			hairs = GetFiles(HAIRS_PATH, hairType)
			//fmt.Println(hairType)
			hairImagePath = hairs[GenerateRandomNumber(0, len(hairs)-1)]
			AddAttributes(metadata, "Hair", hairImagePath)
			AddElement(hairImagePath)

			if eyesRarityPercent >= 0 && eyesRarityPercent < 40 {
				eyes = GetFiles(EYES_PATH, "All")

				eyesImagePath = eyes[GenerateRandomNumber(0, len(eyes)-1)]
				AddAttributes(metadata, "Eyes", eyesImagePath)
				AddElement(eyesImagePath)
			}

		} else {

			/*
				hairs = GetFiles(HAIRS_PATH, hairType)
				//fmt.Println(hairType)
				hairImagePath = hairs[GenerateRandomNumber(0, len(hairs)-1)]
				AddAttributes(metadata, "Hair", hairImagePath)
				AddElement(hairImagePath)

				if eyesRarityPercent >= 0 && eyesRarityPercent < 40 {
					eyes = GetFiles(EYES_PATH, "All")

					eyesImagePath = eyes[GenerateRandomNumber(0, len(eyes)-1)]
					AddAttributes(metadata, "Eyes", eyesImagePath)
					AddElement(eyesImagePath)
				}

				//fmt.Println(hatType)
				hats = GetFiles(HATS_PATH, hatType)

				//fmt.Println(hatsPercent)
				hatImagePath = hats[GenerateRandomNumber(0, len(hats)-1)]
				AddAttributes(metadata, "Hat", hatImagePath)
				AddElement(hatImagePath)
			*/
		}

		pacifiers = GetFiles(DUMMIES_PATH, pacifiersType)
		pacifierImagePath = pacifiers[GenerateRandomNumber(0, len(pacifiers)-1)]
		AddAttributes(metadata, "Pacifier", pacifierImagePath)
		AddElement(pacifierImagePath)

		if hardOrNotPercent >= 0 && hardOrNotPercent < 35 {
			if handType != "Common" {
				hands = GetFiles(HANDS_PATH, handType)
				handImagePath = hands[GenerateRandomNumber(0, len(hands)-1)]
				AddAttributes(metadata, "Hand", handImagePath)
				AddElement(handImagePath)
			}
		}

		if capeOrNotPercent >= 0 && capeOrNotPercent < 25 {
			backs = GetFiles(BACKS_PATH, backType)
			backImagePath = backs[GenerateRandomNumber(0, len(backs)-1)]
			AddAttributes(metadata, "Back", backImagePath)
			AddElement(backImagePath)
		}

		res, err := GenerateBanner(layers, 1024, 1024)
		if err != nil {
			log.Printf("Error generating banner: %+v\n", err)
		}
		counterString := strconv.Itoa(i)
		/*
			counterString := strconv.Itoa(i)
			f, _ := os.Create("./Babies/common/original/baby_" + counterString + ".png")
			png.Encode(f, res)
		*/

		// create buffer
		buff := new(bytes.Buffer)

		// encode image to buffer
		err = png.Encode(buff, res)
		if err != nil {
			fmt.Println("failed to create buffer", err)
		}

		/*
			buffer, err := bimg.Read("./Babies/common/original/baby_" + counterString + ".png")
			if err != nil {
				fmt.Fprintln(os.Stderr, err)
			}
		*/

		options := bimg.Options{
			Width:     1024,
			Height:    1024,
			Crop:      true,
			Quality:   100,
			Rotate:    0,
			Interlace: true,
		}

		newImage, err := bimg.NewImage(buff.Bytes()).Process(options)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
		}

		if bimg.NewImage(newImage).Type() != "png" {
			panic(errors.New("Erro exporting"))
		}

		r := bimg.Write("./Babies/common/original/"+counterString+".png", newImage)
		if r != nil {
			fmt.Println(r)
		}

		//counterStringElement := strconv.Itoa(i+1)

		metadata.Name = "BabyPunk #" + counterString
		metadata.Image = counterString + ".png"

		metadata.Properties.Files = append(metadata.Properties.Files, File{
			URI:  counterString + ".png",
			Type: "image/png",
		})

		elements = append(elements, metadata)

		log.Println(counterString)

		//meta, _ := json.Marshal(metadata)

		meta, _ := json.MarshalIndent(metadata, "", "    ")

		// to append to a file
		// create the file if it doesn't exists with O_CREATE, Set the file up for read write, add the append flag and set the permission
		f3, errr3 := os.OpenFile("./Babies/common/metadata/"+counterString+".json", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0660)
		defer f3.Close()
		if errr3 != nil {
			log.Fatal(errr3)
		}
		// write to file, f.Write()
		f3.Write(meta)

	}

	//j2, _ := json.Marshal(elements)
	j2, _ := json.MarshalIndent(elements, "", "    ")

	// to append to a file
	// create the file if it doesn't exists with O_CREATE, Set the file up for read write, add the append flag and set the permission
	f2, errr2 := os.OpenFile("./Babies/common/metadata/whole.json", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0660)
	defer f2.Close()
	if errr2 != nil {
		log.Fatal(errr2)
	}
	// write to file, f.Write()
	f2.Write(j2)

	/*
			// to append to a file
		// create the file if it doesn't exists with O_CREATE, Set the file up for read write, add the append flag and set the permission
		f, errr := os.OpenFile("./Babies/common/original/"+counterString+".json", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0660)
		defer f.Close()
		if errr != nil {
			log.Fatal(errr)
		}
		// write to file, f.Write()
		f.Write(j)
	*/

	ResizeImages("Babies", "common", COMMON_END_RANGE, 256)
	MergeImages("Babies", "common", 10000, 25, 40, 1000)
}

func AddAttributes(metadata *MetaplexMetadata, name string, value string) {
	metadata.Attributes = append(metadata.Attributes, Attribute{
		TraitType: name,
		Value:     GetObjectName(value),
	})
}

func AddElement(layer string) {
	img, e := openImage(layer)
	if e != nil {
		panic("e")
		panic(e)
	}

	layers = append(layers, ImageLayer{
		Image: img,
		XPos:  0,
		YPos:  0,
	})
}

func openImage(path string) (image.Image, error) {
	p := filepath.FromSlash(path)

	var file, err = os.OpenFile(p, os.O_RDWR, 0644)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	imageFile, _, err := image.Decode(file)
	if err != nil {
		return nil, err
	}

	return imageFile, err
}

func GetFiles(root string, fileType string) []string {
	var files []string

	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if strings.Contains(path, ".png") {
			t := GetObjectRarity(path)
			if fileType == "All" {
				files = append(files, path)
			} else {
				if t == fileType {
					files = append(files, path)
				}
			}
		}
		return nil
	})
	if err != nil {
		panic(err)
	}
	/*
		for _, file := range files {
			fmt.Println(file)
		}
	*/
	return files
}

func GenerateRandomNumber(min, max int) int {
	ns := make([]int, 0)

	if max == 0 {
		return 0
	}

	for i := 0; i < 100; i++ {
		//fmt.Println("max")
		//fmt.Println(max)
		n := rnd.Intn(max)
		ns = append(ns, n)
	}
	n2 := rnd.Intn(len(ns))

	return ns[n2]
}

func ResizeImages2(path, generatedType string, amount int, width int) {
	//for i := 4445; i < 6933; i++ {
	for i := 1; i <= amount; i++ {
		counterString := strconv.Itoa(i)
		ResizeImage(path+"/baby_"+counterString+".png", path+"/resized/baby_"+counterString+".png", width)
	}
}

func ResizeImages(collectionName, generatedType string, amount int, width int) {
	//for i := 4445; i < 6933; i++ {
	for i := 1; i <= amount; i++ {
		counterString := strconv.Itoa(i)
		ResizeImage("./"+collectionName+"/"+generatedType+"/original/baby_"+counterString+".png", "./"+collectionName+"/"+generatedType+"/resized/", width)
	}
}

func MergeImages(collectionName, generatedType string, amount int, imageCountDX, imageCountDY int, divider int) {

	grids := make([]*gim.Grid, 0)

	for i := 1; i <= amount; i++ {
		counterString := strconv.Itoa(i)
		currentFile := collectionName + "/" + generatedType + "/uniques/resized/baby_" + counterString + ".png"

		g := &gim.Grid{
			ImageFilePath: currentFile,
		}
		grids = append(grids, g)

		fmt.Println(counterString)

		if i != 0 && i%divider == 0 {
			rgba, err := gim.New(grids, imageCountDX, imageCountDY).Merge()
			if err != nil {
				panic(err)
			}

			// save the output to jpg or png
			file, err2 := os.Create("m/" + counterString + ".png")
			if err2 != nil {
				panic(err2)
			}
			err = jpeg.Encode(file, rgba, &jpeg.Options{Quality: 100})
			err = png.Encode(file, rgba)
			grids = []*gim.Grid{}
		}
	}
}

func ResizeImage(path string, out string, width int) {
	buffer, err := bimg.Read(path)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
	}

	newImage, err := bimg.NewImage(buffer).Resize(width, width)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
	}

	size, err := bimg.NewImage(newImage).Size()
	if size.Width == width && size.Height == width {
		fmt.Println("The image size is valid " + path)
	}

	s := strings.Split(path, "/")
	bimg.Write(out+s[len(s)-1], newImage)
}

func AddLabel(path string) {
	/*
		buffer, err := bimg.Read(path)
		if err != nil {
			fmt.Println("os.Stderr, err")
			fmt.Fprintln(os.Stderr, err)
		}


			watermark := bimg.Watermark{
				Text:       "1",
				Opacity:    1,
				Width:      48,
				DPI:        100,
				Background: bimg.Color{R: 255, G: 255, B: 255},
			}

		newImage, err := bimg.NewImage(buffer).Resize(48, 48)
		if err != nil {
			fmt.Fprintln(os.Stderr, err)
		}


			newImage2, err2 := bimg.NewImage(newImage).Watermark(watermark)
			if err != nil {
				fmt.Println("os.Stderr, err2")
				fmt.Fprintln(os.Stderr, err2)
			}


		size, err := bimg.NewImage(newImage).Size()
		if size.Width == size && size.Height == 48 {
			fmt.Println("The image size is valid " + path)
		}

		s := strings.Split(path, "/")
		bimg.Write("./generatedResizedLabel/"+s[len(s)-1], newImage)
	*/
}
